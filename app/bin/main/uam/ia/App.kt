/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package uam.ia
import kotlin.io.use

import org.opencv.core.Core
import org.opencv.core.CvType
import org.opencv.core.Mat
import org.opencv.core.Scalar
import org.opencv.imgcodecs.Imgcodecs
import org.opencv.core.Size
import org.opencv.imgproc.Imgproc

import org.tensorflow.Graph
import org.tensorflow.Session
import org.tensorflow.Tensor
import java.nio.file.Files
import java.nio.file.Paths
import java.nio.FloatBuffer

class App {
    val greeting: String
        get() {
            return "Hello World!"
        }
}
fun analizarFondo(image: Mat) {
    // Convertir la imagen a escala de grises
    val grayImage = Mat()
    Imgproc.cvtColor(image, grayImage, Imgproc.COLOR_BGR2GRAY)

    // Umbralizar la imagen para separar el fondo claro del oscuro
    val thresholdImage = Mat()
    Imgproc.threshold(grayImage, thresholdImage, 127.0, 255.0, Imgproc.THRESH_BINARY)

    // Contar píxeles claros y oscuros
    val countWhite = Core.countNonZero(thresholdImage)
    val countBlack = grayImage.rows() * grayImage.cols() - countWhite

    println("Píxeles claros: $countWhite")
    println("Píxeles oscuros: $countBlack")

    // Analizar el fondo
    if (countWhite > countBlack) {
        println("El fondo de la imagen es predominantemente claro.")
    } else {
        println("El fondo de la imagen es predominantemente oscuro.")
    }
}
fun main() {
    System.loadLibrary(Core.NATIVE_LIBRARY_NAME)
    val mat = Imgcodecs.imread("/home/eduardoc/Documentos/ProyectosDesarrollo/uam.ia/app/src/main/resources/perosna-fondo-claro.jpg")
    val mat2 = Imgcodecs.imread("/home/eduardoc/Documentos/ProyectosDesarrollo/uam.ia/app/src/main/resources/persona-fondo-oscuro.jpeg")
    if (!mat.empty()) {
        println("Imagen cargada con éxito: $mat")
        analizarFondo(mat)
    }
    if (!mat2.empty()) {
        println("Imagen cargada con éxito: $mat2")
        analizarFondo(mat2)
    }
    
    val modelo = "/home/eduardoc/Descargas/mask_rcnn_inception_resnet_v2_1024x1024_coco17_gpu-8/saved_model/saved_model.pb"
    val image = Imgcodecs.imread("/home/eduardoc/Documentos/ProyectosDesarrollo/uam.ia/app/src/main/resources/dospersonas.jpg")

   
    val resizedImage = Mat()
    val dstSize = Size(300.0, 300.0)
    Imgproc.resize(image, resizedImage, dstSize)

    val preprocessedImage = Mat(dstSize, CvType.CV_32F)
    resizedImage.convertTo(preprocessedImage, CvType.CV_32F, 1.0 / 255.0)

    val buffer = FloatBuffer.allocate(preprocessedImage.rows() * preprocessedImage.cols() * preprocessedImage.channels())
    preprocessedImage.get(0, 0, buffer.array())
    val tensor = Tensor.create(longArrayOf(1, preprocessedImage.rows().toLong(), preprocessedImage.cols().toLong(), preprocessedImage.channels().toLong()), buffer)
    val graph = Graph()
    try {
        val session = Session(graph)
        try {
            Files.newInputStream(Paths.get(modelo)).use { modelStream ->
                graph.importGraphDef(modelStream.readAllBytes())
            }
        val runner = session.runner().feed("input_node", tensor).fetch("output_node")
        val output = runner.run()[0]
        print(output)

        // Procesar la salida para la detección de personas
        // ... (tu código de procesamiento aquí)
        } finally {
            session.close() // Asegúrate de cerrar la sesión
        }
    } finally {
        graph.close() // Asegúrate de cerrar el gráfico
    }
}

